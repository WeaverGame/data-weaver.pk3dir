// GFX.SHADER
// 
// this file contains shaders that are used by the programmers to
// generate special effects not attached to specific geometry.  This
// also has 2D shaders such as fonts, etc.
//

white
{
	{
		map	_white
		blend	GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA
		rgbgen	vertex
	}
}

//==========================================================================

sprites/objitemicon
{
	nomipmaps
	nopicmip
	{
		clampmap gfx/icons/obj_item.png
		blend blend
	}
}

sprites/balloon3
{
	nomipmaps
	nopicmip
	{
		map sprites/balloon4.png
		centerScale 1.1 - (0.3 *  (  (   (sinTable[time * .7] + 1.0) / 2.0 ) )), 1.1 - (0.3 *  (  (   (sinTable[time * .7] + 1.0) / 2.0 ) ))

		blend blend
		alpha 0.6 + 0.3 * ( 1.0 -  (   (sinTable[time * .5] + 1.0) / 2.0 ) )
	}
}

// friend and foe icons floating over client's heads in teamplay games
sprites/friend
{
	nomipmaps
	nopicmip
	{
		map sprites/friend.png
		centerScale 1.1 - (0.3 *  (  (   (sinTable[time * .7] + 1.0) / 2.0 ) )), 1.1 - (0.3 *  (  (   (sinTable[time * .7] + 1.0) / 2.0 ) ))

		blend blend
		alpha 0.6 + 0.3 * ( 1.0 -  (   (sinTable[time * .5] + 1.0) / 2.0 ) )
	}
}

sprites/foe
{
	nomipmaps
	nopicmip
	{
		map gfx/misc/foe.png
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
	}
}

sprites/plasma1
{
	twoSided
	{
		clampmap gfx/misc/plasmaa.png
		blend add
		rotate time * 3
	}
}

// markShadow is the very cheap blurry blob underneat the player
markShadow
{
	polygonOffset
	{
		map gfx/misc/shadow.tga
		blend GL_ZERO, GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

// projectionShadow is used for cheap squashed model shadows
projectionShadow
{
	polygonOffset
	deformVertexes projectionShadow
	{
		map			*white
		blendFunc GL_ONE GL_ZERO
		rgbGen wave square 0 0 0 0				// just solid black
	}	
}


// wake is the mark on water surfaces for paddling players
wake
{
	{
		map gfx/misc/splash.tga
		clamp
		blend blend
		rgbGen vertex
        rotate 250 * time
        //tcMod stretch sin .9 0.1 0 0.7
		centerScale 1.3 + sinTable[time] * 0.1, 1.3 + cosTable[time] * 0.1
		rgbGen wave sin .7 .3 .25 .5
	}
    {
		map gfx/misc/splash.tga
		clamp
		blend blend
		rgbGen vertex
        rotate -230 * time
        //tcMod stretch sin .9 0.05 0 0.9
		rgbGen wave sin .7 .3 .25 .4
	}
	/*
	{       
      	blend	gl_zero, gl_one_minus_src_color
		map gfx/misc/splash.png
		clamp
		vertexColor
	}
	*/
}


// viewBloodBlend gives the blended directional cue when you get hit
viewBloodBlend
{
	nopicmip			// make sure a border remains
	sort	nearest
	{
		//map models/weaphits/blood201.tga
        	//map gfx/damage/blood_screen.tga
		clampmap textures/decals/blood_splat02.tga
		//blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

waterBubble
{
	sort underwater
	twoSided
	entityMergable		// allow all the sprites to be merged together
	{
		map gfx/misc/bubble.png
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
		vertexColor
	}
	/*
	{
		stage	heathazemap
		map		gfx/misc/bubble_n.tga
		deformMagnitude .1
		alphaTest 0.5
	}
	*/
}

smokePuff
{
	twoSided
	entityMergable		// allow all the sprites to be merged together
	{
		map gfx/misc/smoke1.png
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
		vertexColor
	}
}

hasteSmokePuff			// drops behind player's feet when speeded
{
	twoSided
	entityMergable		// allow all the sprites to be merged together
	{
		map gfx/misc/smoke4.png
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
		vertexColor
	}
}

shotgunSmokePuff
{
	twoSided
	{
		map gfx/misc/smoke2.png
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
		vertexColor
	}
}

nailTrail
{
	sort nearest
	twoSided
	
	{
		clampmap gfx/misc/smoke2.png 
		blend GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA
		vertexColor
	}

}

flareShader
{
	twoSided
	{
		map gfx/misc/flare.png
		blend add
		vertexColor
	}
}

sun
{
	twoSided
	{
		map gfx/misc/sun.png
		blend add
		vertexColor
	}
}

railDisc
{
	twoSided
	//deformVertexes wave 100 sin 0 .5 0 2.4
	translucent
	sort postProcess
	{
		stage	heathazemap
		map		gfx/misc/raildisc_mono2_n.png
		clamp
		//highQuality
		deformMagnitude 1
		//tcMod stretch sawtooth 1.4 -10 0 .1
		centerScale 0.6 + (time + parm4) * 2.3 * (1 - parm0) , 0.6 + (time + parm4) * 2.3 * (1 - parm0)
		blend GL_ONE, GL_ZERO
		alphaTest 0.5
		maskDepth	// don't write to depth buffer
					// it would mess up depth buffer based post process effects
      }
}

railRing
{
	twoSided
	translucent
	sort postProcess
	{
		map gfx/misc/raildisc_mono2.png
		clamp
		blend add
      }
}

railCore
{
	sort nearest
	twoSided
	{
		map gfx/misc/railcorethin_mono.tga
		blend add
		//vertexColor
		colored
		scroll time * -2,  0
	}
}

lightningBolt
{
	twoSided
	{
		map gfx/misc/lightning3.tga
		blend GL_ONE , GL_ONE
		rgbGen wave sin 1 0.5 0 7.1
		scale  2 , 1
		scroll time * -5 , 0
	}
	{
		map gfx/misc/lightning3.tga
		blend GL_ONE , GL_ONE
		rgbGen wave sin 1 0.8 0 8.1
		scale  -1.3 , -1
		scroll time * -7.2 , 0
	}
}

// shader used on the occasional machinegun bullet tracers
gfx/misc/tracer
{
	cull none
	{
		map	gfx/misc/tracer.tga
		blend add
	}
}

burnMark
{
	polygonOffset
	parallax
	sort decal
	{
		stage colorMap
		map textures/decals/explo_burn01.tga
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

gfx/damage/bullet_mrk
{
	polygonOffset
	parallax
	sort decal

	{
		stage colorMap
		map gfx/damage/bullet_mrk.png
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

gfx/damage/burn_med_mrk
{
	polygonOffset
	parallax
	sort decal
	{
		stage colorMap
		map textures/decals/explo_burn01.tga
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

gfx/damage/hole_lg_mrk
{
	polygonOffset
	{
		stage colorMap
		map gfx/damage/hole_lg_mrk.tga
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

gfx/damage/plasma_mrk
{
	polygonOffset
	{
		//map gfx/damage/plasma_mrk.tga
		map textures/decals/particle_burn01.png
		blendFunc GL_ZERO GL_ONE_MINUS_SRC_COLOR
		vertexColor
	}
}

gfx/2d/weapon_select
{
	nopicmip
	{
		map gfx/2d/weapon_select.png
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbGen identity
		rgbgen vertex
	}
}

gfx/2d/select
{
	nopicmip
	{
		map gfx/2d/select.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbGen identity
		rgbgen vertex
	}
}

gfx/2d/numbers/zero_32b
{
	nopicmip
	{
		map gfx/2d/numbers/zero_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/one_32b
{
	nopicmip
	{
		map gfx/2d/numbers/one_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/two_32b
{
	nopicmip
	{
		map gfx/2d/numbers/two_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/three_32b
{
	nopicmip
	{
		map gfx/2d/numbers/three_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/four_32b
{
	nopicmip
	{
		map gfx/2d/numbers/four_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/five_32b
{
	nopicmip
	{
		map gfx/2d/numbers/five_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/six_32b
{
	nopicmip
	{
		map gfx/2d/numbers/six_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/seven_32b
{
	nopicmip
	{
		map gfx/2d/numbers/seven_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/eight_32b
{
	nopicmip
	{
		map gfx/2d/numbers/eight_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/nine_32b
{
	nopicmip
	{
		map gfx/2d/numbers/nine_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}
gfx/2d/numbers/minus_32b
{
	nopicmip
	{
		map gfx/2d/numbers/minus_32b.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbgen vertex
	}
}


//
// weapon hits
// All of these will be put on entities with a shaderTime offset, so they
// can be expected to start at time 0 for each separate explosion
//
// Many of these are use smoothly morphed animating textures by pairing
// sawtooth and inverse sawtooth rgbGens
rocketExplosion
{
	twoSided
	
	{
		if((time * 13) % 13 == 0)
		map models/weaphits/rlboom_0.png
		blend add
	}
	{
		if((time * 13) % 13 == 1)
		map models/weaphits/rlboom_1.png
		blend add
	}
	{
		if((time * 13) % 13 == 2)
		map models/weaphits/rlboom_2.png
		blend add
	}
	{
		if((time * 13) % 13 == 3)
		map models/weaphits/rlboom_3.png
		blend add
	}
	{
		if((time * 13) % 13 == 4)
		map models/weaphits/rlboom_4.png
		blend add
	}
	{
		if((time * 13) % 13 == 5)
		map models/weaphits/rlboom_5.png
		blend add
	}
	{
		if((time * 13) % 13 == 6)
		map models/weaphits/rlboom_6.png
		blend add
	}
	{
		if((time * 13) % 13 == 7)
		map models/weaphits/rlboom_7.png
		blend add
	}
	{
		if((time * 13) % 13 == 8)
		map models/weaphits/rlboom_8.png
		blend add
	}
	{
		if((time * 13) % 13 == 9)
		map models/weaphits/rlboom_9.png
		blend add
	}
	{
		if((time * 13) % 13 == 10)
		map models/weaphits/rlboom_10.png
		blend add
	}
	{
		if((time * 13) % 13 == 11)
		map models/weaphits/rlboom_11.png
		blend add
	}
	{
		if((time * 13) % 13 == 12)
		map models/weaphits/rlboom_12.png
		blend add
	}
}

grenadeExplosion
{
	twoSided

	{
		if((time * 13) % 13 == 0)
		map models/weaphits/rlboom_0.png
		blend add
	}
	{
		if((time * 13) % 13 == 1)
		map models/weaphits/rlboom_1.png
		blend add
	}
	{
		if((time * 13) % 13 == 2)
		map models/weaphits/rlboom_2.png
		blend add
	}
	{
		if((time * 13) % 13 == 3)
		map models/weaphits/rlboom_3.png
		blend add
	}
	{
		if((time * 13) % 13 == 4)
		map models/weaphits/rlboom_4.png
		blend add
	}
	{
		if((time * 13) % 13 == 5)
		map models/weaphits/rlboom_5.png
		blend add
	}
	{
		if((time * 13) % 13 == 6)
		map models/weaphits/rlboom_6.png
		blend add
	}
	{
		if((time * 13) % 13 == 7)
		map models/weaphits/rlboom_7.png
		blend add
	}
	{
		if((time * 13) % 13 == 8)
		map models/weaphits/rlboom_8.png
		blend add
	}
	{
		if((time * 13) % 13 == 9)
		map models/weaphits/rlboom_9.png
		blend add
	}
	{
		if((time * 13) % 13 == 10)
		map models/weaphits/rlboom_10.png
		blend add
	}
	{
		if((time * 13) % 13 == 11)
		map models/weaphits/rlboom_11.png
		blend add
	}
	{
		if((time * 13) % 13 == 12)
		map models/weaphits/rlboom_12.png
		blend add
	}
}

debugPlayerAABB
{
	nopicmip

	{
		map gfx/misc/aabb.tga
		blend add
		rgbGen vertex
	}
}

debugPlayerAABB_twoSided
{
	nopicmip
	twoSided

	{
		map gfx/misc/aabb.tga
		blend add
		rgbGen vertex
	}
}

